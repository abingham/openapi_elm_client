module {{ module_name }} exposing (..)

import Http
import Json.Decode
import Json.Decode.Pipeline
import Url.Builder

-- Typedefs

{% for type_def in typedefs.values() %}
type alias {{ type_def | alias_name }} = 
{% for property_def in type_def.properties.values() %}
    {% if loop.first %}{ {% else %}, {% endif %}{{ property_def | property_name }}: {{ property_def | elm_type }}
{% endfor %}
    }

{% endfor %}

-- Decoders

{% for type_def in typedefs.values() %}
{{ type_def | json_decoder }} : Json.Decode.Decoder {{ type_def | alias_name }}
{{ type_def | json_decoder }} = 
    Json.Decode.succeed {{ type_def | alias_name }}
{% for property_def in type_def.properties.values() %}
    {% if property_def.required %}
        |> Json.Decode.Pipeline.required "{{ property_def.name }}" {{ property_def.typedef | json_decoder }}
    {% else %}
        |> Json.Decode.Pipeline.optional "{{ property_def.name }}" (Json.Decode.nullable {{ property_def.typedef | json_decoder }}) Nothing
    {% endif %}
{% endfor %}

{% endfor %}

-- Remote calls
{% for endpoint in endpoints %}
{% if endpoint.method == 'get' %}
{{ endpoint.operation_id | camel_case }}Request :  {{ endpoint | endpoint_arg_types }} (Result Http.Error ({{ endpoint.responses['200'].typedef | elm_type}}) -> msg) -> Cmd msg
{{ endpoint.operation_id | camel_case }}Request {{ endpoint | endpoint_arg_names }} toMsg =
    Http.get
      { url = Url.Builder.absolute [{{ endpoint | endpoint_url }}] [{{ endpoint | endpoint_url_params }}]
      , expect = Http.expectJson toMsg {{ endpoint.responses['200'].typedef | json_decoder }} 
      }
{% endif %}

{% endfor %}
