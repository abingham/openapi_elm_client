module {{ module_name }} exposing (..)

import Http
import Json.Decode
import Json.Encode
import Json.Decode.Pipeline
import Maybe.Extra
import Url.Builder

-- Typedefs

{% for type_def in typedefs.values() %}
type alias {{ type_def | alias_name }} = 
{% for property_def in type_def.properties.values() %}
    {% if loop.first %}{ {% else %}, {% endif %}{{ property_def | property_name }}: {{ property_def | elm_type }}
{% endfor %}
    }

{% endfor %}

-- Decoders / Encoders

{% for type_def in typedefs.values() %}
{{ type_def | json_decoder }} : Json.Decode.Decoder {{ type_def | alias_name }}
{{ type_def | json_decoder }} = 
    Json.Decode.succeed {{ type_def | alias_name }}
{% for property_def in type_def.properties.values() %}
    {% if property_def.required %}
        |> Json.Decode.Pipeline.required "{{ property_def.name }}" {{ property_def.typedef | json_decoder }}
    {% else %}
        |> Json.Decode.Pipeline.optional "{{ property_def.name }}" (Json.Decode.nullable {{ property_def.typedef | json_decoder }}) Nothing
    {% endif %}
{% endfor %}

{{ type_def | json_encoder }} : Json.Encode.Encoder {{ type_def | alias_name }}
{{ type_def | json_encoder }} obj =
    Json.Encode.object [
{% for property_def in type_def.properties.values() %}
{% if property_def.required %}
    ("{{ property_def.name }}", {{ property_def.typedef | json_encoder }} obj.{{ property_def.name | camel_case }})
{% else %}
{% endif %}
{% endfor %}
    ]

{% endfor %}

-- Remote calls
{% for endpoint in endpoints %}
{% if endpoint.method == 'get' %}
{{ endpoint.operation_id | camel_case }}Request :  String -> {{ endpoint | endpoint_arg_types }} (Result Http.Error ({{ endpoint.responses['200'].typedef | elm_type}}) -> msg) -> Cmd msg
{{ endpoint.operation_id | camel_case }}Request baseUrl {{ endpoint | endpoint_arg_names }} toMsg =
    let
        queryParams = [
{% for parameter in endpoint.parameters %}
{% if parameter.in_what == 'query' %}
{% if parameter.required %}
            Just ({{ parameter.typedef | endpoint_query_type }} "{{parameter.name}}" {{ parameter.name | camel_case}}){% if not loop.last %},{% endif %}

{% else %}
            case {{ parameter.name | camel_case }} of
                Just val -> Just ({{ parameter.typedef | endpoint_query_type }} "{{parameter.name}}" val)
                Nothing -> Nothing{% if not loop.last %},{% endif %} 

{% endif %}
{% endif %}
{% endfor %}
            ] |> Maybe.Extra.values
    in
    Http.get
      { url = Url.Builder.relative [baseUrl, {{ endpoint | endpoint_url }}] queryParams 
      , expect = Http.expectJson toMsg {{ endpoint.responses['200'].typedef | json_decoder }} 
      }

{% elif endpoint.method == 'post' %}

{{ endpoint.operation_id | camel_case }} : String -> {{ endpoint | endpoint_arg_types }} (Result Http.Error ({{ endpoint.responses['201'].typedef | elm_type}}) -> msg) -> Cmd msg
{{ endpoint.operation_id | camel_case }} baseUrl {{ endpoint | endpoint_arg_names }} toMsg =
    let
        payload =
            Json.Encode.object
                [ 
{% for parameter in endpoint.parameters %}
                    ("{{ parameter.name | camel_case }}", {{ parameter.typedef | json_encoder }} {{ parameter.name | camel_case}})
{% endfor %}
                    
                -- ( "cameraId", Json.Encode.string (cameraId source) )
                -- , ( "sourceName", Json.Encode.string (sourceName source) )
                ]
        body =
            Http.jsonBody payload
        url =
            Url.Builder.relative [ baseUrl, {{ endpoint | endpoint_url }} ] []
    in
    Http.post { body = body, url = url, expect = Http.expectJson toMsg {{ endpoint.responses['201'].typedef | json_decoder }} }

{% endif %}

{% endfor %}
